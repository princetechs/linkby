generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Link {
  id        Int      @id @default(autoincrement())
  url       String
  shortCode String   @unique
  user   User?   @relation(fields: [userId], references: [id])
  userId Int?
  @@index([userId], name: "idx_link_userId")
}


model Account {
  id                     Int      @id @default(autoincrement())
  userId                 Int      // This should be Int to match User's id
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String?  @db.Text
  access_token           String?  @db.Text
  expires_at             Int?
  refresh_token_expires_in Int?  
  token_type             String?
  scope                  String?
  id_token               String?  @db.Text
  session_state          String?
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @map("updated_at")
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}


model User {
  id                     Int    @id @default(autoincrement())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]
  links                  Link[]
  // Removed Post relationship for clarity, add if it exists

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int      // This should be Int to match User's id
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}


